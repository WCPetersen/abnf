[img:./abnf.png abnf title image]
= abnf - converter from ABNF to Regexp

This is a library to convert ABNF (Augmented Backus-Naur Form) to
Regexp (Regular Expression) written in Ruby.
It parses a description according to ABNF defined by RFC 2234 and some variants.
Then the parsed grammar is transformed to recursion free.
Although the transformation is impossible in general, 
the library transform left and right recursion.
The recursion free grammar can be printed as Regexp literal
which is suitable in Ruby script.
The literal is pretty readable because parentheses are minimized and
properly indented by the Wadler's pretty printing algebra.
It is also possible to use the Regexp just in place.

= Author
Tanaka Akira <akr@m17n.org>

= Example
Following example shows URI-reference defined by RFC 2396 can be converted to
Regexp.
Note that URI-reference has no recursion.
Also note that the example works well without installing the library after make.

  require 'pp'
  require 'abnf'

  # URI-reference [RFC2396]
  pp ABNF.regexp_tree(<<-'End')
        URI-reference = [ absoluteURI | relativeURI ] [ "#" fragment ]
        absoluteURI   = scheme ":" ( hier_part | opaque_part )
        relativeURI   = ( net_path | abs_path | rel_path ) [ "?" query ]

        (...snip...)

        lowalpha = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" |
                   "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" |
                   "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
        upalpha  = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" |
                   "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" |
                   "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
        digit    = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" |
                   "8" | "9"
  End

The result is follows:
  %r{(?:[A-Za-z][\x2b\x2d\x2e0-9A-Za-z]*:
        (?:(?://
              (?:(?:(?:(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-;=A-Z_a-z~])*@)?
                    (?:(?:(?:[0-9A-Za-z]|[0-9A-Za-z][\x2d0-9A-Za-z]*[0-9A-Za-z])
                          \x2e)*(?:[A-Za-z]|[A-Za-z][\x2d0-9A-Za-z]*[0-9A-Za-z])
                       \x2e?|
                       \d+\x2e\d+\x2e\d+\x2e\d+)(?::\d*)?)?|
                 (?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-;=@-Z_a-z~])+)
              (?:/(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*
                 (?:;(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*)*
                 (?:/(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*
                    (?:;
                       (?:%[0-9A-Fa-f][0-9A-Fa-f]|
                          [!\x24&-\x2e0-:=@-Z_a-z~])*)*)*)?|
              /(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*
              (?:;(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*)*
              (?:/(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*
                 (?:;(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*)*)*)
           (?:\x3f(?:[!\x24&-;=\x3f-Z_a-z~]|%[0-9A-Fa-f][0-9A-Fa-f])*)?|
           (?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-;=\x3f-Z_a-z~])
           (?:[!\x24&-;=\x3f-Z_a-z~]|%[0-9A-Fa-f][0-9A-Fa-f])*)|
        (?://
           (?:(?:(?:(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-;=A-Z_a-z~])*@)?
                 (?:(?:(?:[0-9A-Za-z]|[0-9A-Za-z][\x2d0-9A-Za-z]*[0-9A-Za-z])
                       \x2e)*(?:[A-Za-z]|[A-Za-z][\x2d0-9A-Za-z]*[0-9A-Za-z])
                    \x2e?|
                    \d+\x2e\d+\x2e\d+\x2e\d+)(?::\d*)?)?|
              (?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-;=@-Z_a-z~])+)
           (?:/(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*
              (?:;(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*)*
              (?:/(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*
                 (?:;
                    (?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*)*)*)?|
           /(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*
           (?:;(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*)*
           (?:/(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*
              (?:;(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*)*)*|
           (?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-9;=@-Z_a-z~])+
           (?:/(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*
              (?:;(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*)*
              (?:/(?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*
                 (?:;
                    (?:%[0-9A-Fa-f][0-9A-Fa-f]|[!\x24&-\x2e0-:=@-Z_a-z~])*)*)*)?)
        (?:\x3f(?:[!\x24&-;=\x3f-Z_a-z~]|%[0-9A-Fa-f][0-9A-Fa-f])*)?)?
     (?:\x23(?:[!\x24&-;=\x3f-Z_a-z~]|%[0-9A-Fa-f][0-9A-Fa-f])*)?}x

A converted regexp can be used to match in place as:

  p /\A#{ABNF.regexp <<'End'}\z/o =~ "::13.1.68.3"
    IPv6address = "::"                  /
          7( hex4 ":" )          hex4   /
        1*8( hex4 ":" )      ":"        /
          7( hex4 ":" )    ( ":" hex4 ) /
          6( hex4 ":" ) 1*2( ":" hex4 ) /
          5( hex4 ":" ) 1*3( ":" hex4 ) /
          4( hex4 ":" ) 1*4( ":" hex4 ) /
          3( hex4 ":" ) 1*5( ":" hex4 ) /
          2( hex4 ":" ) 1*6( ":" hex4 ) /
           ( hex4 ":" ) 1*7( ":" hex4 ) /
                  ":"   1*8( ":" hex4 ) /
          6( hex4 ":" )                     IPv4address /
          6( hex4 ":" ) ":"                 IPv4address /
          5( hex4 ":" ) ":" 0*1( hex4 ":" ) IPv4address /
          4( hex4 ":" ) ":" 0*2( hex4 ":" ) IPv4address /
          3( hex4 ":" ) ":" 0*3( hex4 ":" ) IPv4address /
          2( hex4 ":" ) ":" 0*4( hex4 ":" ) IPv4address /
           ( hex4 ":" ) ":" 0*5( hex4 ":" ) IPv4address /
                  "::"      0*6( hex4 ":" ) IPv4address
    IPv4address = 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT
    hex4    = 1*4HEXDIG
  End

== Document
* [./abnf.html abnf.rb reference manual]
* [./natset.html natset.rb reference manual]
* [./regexptree.html regexptree.rb reference manual]

== Requirements
* [http://www.ruby-lang.org/ ruby-1.7.3 (2002-10-08)] (older version doesn't work.)
* [http://www.ruby-lang.org/en/raa-list.rhtml?name=Racc racc-1.3.11] (older version may work.)

= License

Ruby's

== Download

: with HTTP to get (relatively) stable tarball:
  [http://cvs.m17n.org/cgi-bin/viewcvs/abnf/abnf-0.4.tar.gz?tarball=1&only_with_tag=abnf-0_4&cvsroot=ruby abnf-0.4.tar.gz]

: with HTTP to get latest tarball:
  [http://cvs.m17n.org/cgi-bin/viewcvs/abnf/abnf-latest.tar.gz?tarball=1&cvsroot=ruby abnf-latest.tar.gz]

: with [http://www.cvshome.org/ CVS]:
    % cvs -d :pserver:anonymous@cvs.m17n.org:/cvs/ruby login
    (Logging in to anonymous@cvs.m17n.org)
    CVS password: (just hit return)
    % cvs -d :pserver:anonymous@cvs.m17n.org:/cvs/ruby co abnf

  The cvs password can be any string.

: with [http://viewcvs.sourceforge.net ViewCVS]:
  [http://cvs.m17n.org/cgi-bin/viewcvs/abnf/?cvsroot=ruby click here to browse source code].

---
-- [http://cvs.m17n.org/~akr/ akr@m17n.org]
